from config import *
from kb import *

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(commands=['start', 'help'])
async def command_start(message : types.Message):
    await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è —á–∞—Ç-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –í–∞–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø–µ—Å—Ç–∏—Ü–∏–¥', parse_mode='HTML', reply_markup=await mainKB())

# –ú–µ–Ω—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
@dp.callback_query_handler(lambda c: c.data == 'main - ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def process_callback_pesticides(callback_query: types.CallbackQuery):
    print(callback_query.data)
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.edit_text('–ü–û–õ–ï–ó–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø!!!', parse_mode='html', reply_markup = await infoKB())

# –í—ã—Ö–æ–¥ –∏–∑ –º–µ–Ω—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.callback_query_handler(lambda c: c.data == 'info - –ù–∞–∑–∞–¥')
async def process_callback_pesticides(callback_query: types.CallbackQuery):
    print(callback_query.data)
    await callback_query.message.edit_text('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è —á–∞—Ç-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –í–∞–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø–µ—Å—Ç–∏—Ü–∏–¥', parse_mode='HTML', reply_markup=await mainKB())

# –ü–æ–∏—Å–∫ –ø–µ—Å—Ç–∏—Ü–∏–¥–æ–≤
@dp.callback_query_handler(lambda c: c.data == 'main - üîç –ù–∞–π—Ç–∏ –ø–µ—Å—Ç–∏—Ü–∏–¥')
async def process_callback_pesticides(callback_query: types.CallbackQuery):
    print(callback_query.data)
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.edit_text('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–Ω–∏–µ –ø–µ—Å—Ç–∏—Ü–∏–¥–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫.\n–ù–∞–π–¥–µ—Ç—Å—è –≤—Å–µ!', parse_mode='html', reply_markup = await pesticidesKB())

    r = requests.get("https://www.agroxxi.ru/goshandbook/wiki/pesticides")
    html = BS(r.content, 'html.parser')

    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –ø–µ—Å—Ç–∏—Ü–∏–¥–æ–≤
    name_pesticides = []

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    for el in html.select(".listcatzrast > .row"):
        title = el.select('.alfabet-title > a')
        if title:
            name_pesticides.append({'name_pesticides': title[0].text})

    # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª JSON
    with open('name_pesticides.json', 'w', encoding='utf-8') as f:
        json.dump(name_pesticides, f, ensure_ascii=False, indent=4)

    print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª name_pesticides.json")


    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞
    with open('name_pesticides.json', 'r', encoding='utf-8') as f:
        pesticides = json.load(f)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    @dp.message_handler(content_types=types.ContentType.TEXT)
    async def handle_text_message(message: types.Message):

        user_input = message.text.lower()
        # found_pesticide = next((p for p in pesticides if p['name_pesticides'].lower() == user_input), None)
        found_pesticide = [p for p in pesticides if user_input in p['name_pesticides'].lower()]
        
        if found_pesticide:
            # await message.reply(f'–ù–∞–π–¥–µ–Ω –ø–µ—Å—Ç–∏—Ü–∏–¥: {found_pesticides["name_pesticides"]}')
            
            # response = "–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–µ—Å—Ç–∏—Ü–∏–¥—ã:\n" + "\n".join([p['name_pesticides'] for p in found_pesticide])

            async def pesticides_nameKB():
                buttons = [p['name_pesticides'] for p in found_pesticide]
                btn = [InlineKeyboardButton(button, callback_data=f'pesticides - {button}')
                        for button in buttons]
                    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
                back_button = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='pesticides - back')
                
                btn.append(back_button)
                inl_menu = InlineKeyboardMarkup(row_width=1).add(*btn)
                return inl_menu
            
            await message.answer("–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–µ—Å—Ç–∏—Ü–∏–¥—ã", reply_markup=await pesticides_nameKB())

        else:
            await message.answer('–ü–µ—Å—Ç–∏—Ü–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.')

                

@dp.callback_query_handler(lambda c: c.data == 'pesticides - back')
async def process_callback_pesticidesBack(callback_query: types.CallbackQuery):
    print(callback_query.data)
    await callback_query.message.delete(callback_query.message.text)
    await callback_query.message.edit_text('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–Ω–∏–µ –ø–µ—Å—Ç–∏—Ü–∏–¥–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫.\n–ù–∞–π–¥–µ—Ç—Å—è –≤—Å–µ!', parse_mode='html', reply_markup = await pesticidesKB())
    

    
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.edit_text('–°–ø–∏—Å–æ–∫ –ø–µ—Å—Ç–∏—Ü–∏–¥–æ–≤', parse_mode='html', reply_markup = await alphabetKB())


@dp.callback_query_handler(lambda c: c.data == 'pesticidesMenu - üìó –°–ø–∏—Å–æ–∫ –ø–µ—Å—Ç–∏—Ü–∏–¥–æ–≤')
async def process_callback_pesticides(callback_query: types.CallbackQuery):
    print(callback_query.data)

    
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.edit_text('–°–ø–∏—Å–æ–∫ –ø–µ—Å—Ç–∏—Ü–∏–¥–æ–≤', parse_mode='html', reply_markup = await alphabetKB())

@dp.callback_query_handler(lambda c: c.data == 'pesticidesMenu - –ù–∞–∑–∞–¥')
async def process_callback_pesticides(callback_query: types.CallbackQuery):
    print(callback_query.data)
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.edit_text('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è —á–∞—Ç-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –í–∞–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø–µ—Å—Ç–∏—Ü–∏–¥', parse_mode='HTML', reply_markup=await mainKB())


@dp.callback_query_handler(lambda c: c.data == 'pesticidesListKB - –ù–∞–∑–∞–¥')
async def process_callback_pesticides(callback_query: types.CallbackQuery):
    print(callback_query.data)
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.edit_text('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–Ω–∏–µ –ø–µ—Å—Ç–∏—Ü–∏–¥–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫.\n–ù–∞–π–¥–µ—Ç—Å—è –≤—Å–µ!', parse_mode='html', reply_markup = await pesticidesKB())
